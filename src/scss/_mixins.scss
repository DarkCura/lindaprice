@mixin grid-generator($grid__breakpoints, $grid__columns, $excludeQuery: 'xs') {
    @each $grid__breakpoint in $grid__breakpoints {
        @if $excludeQuery == nth($grid__breakpoint, 1) {
            .grid {
                width: 100%;
                margin: 0 auto;
                &__fluid {
                    width: 100%;
                    margin: 0;
                }
            }
            .grid__row {
                display: flex;
                flex-wrap: wrap;
                width: 100%;
            }
            @include baseline-grid-column-generator($grid__columns);
        }
        $relativeMedia: (nth($grid__breakpoint, 2)/16);

        @media only screen and (min-width: #{$relativeMedia}rem) { 
            .grid {
                max-width: #{$relativeMedia}rem;
                margin: 0 auto;
                &__fluid {
                    margin: 0;
                    max-width: 100%;
                }
            }
            @include grid-column-generator(nth($grid__breakpoint, 1), $grid__columns)
        }
    }
}

@mixin grid-column-generator($grid__size, $grid__columns) {
	@for $i from 1 through $grid__columns {
        $percentage: percentage($i / $grid__columns);
		.grid__col-#{$i}\/#{$grid__columns}\@#{$grid__size} {
            flex-basis: $percentage;
            max-width: $percentage;
        }
        .grid__col-offset-#{$i}\/#{$grid__columns}\@#{$grid__size} {
            margin-left: $percentage;
        }
        @if ($i == 1) {
            .grid__col-order-first\@#{$grid__size} {
                order: -$i;
            }
        }
        .grid__col-order-#{$i}\@#{$grid__size} {
            order: $i;
        }
        @if ($i == $grid__columns) {
            .grid__col-order-last\@#{$grid__size} {
                order: $i + 1;
            }
        }
	}
}

@mixin baseline-grid-column-generator($grid__columns) {
    @for $i from 1 through $grid__columns {
        $percentage: percentage($i / $grid__columns);
		.grid__col-#{$i}\/#{$grid__columns} {
            flex-basis: $percentage;
            max-width: $percentage;
        }
        .grid__col-offset-#{$i}\/#{$grid__columns} {
            margin-left: $percentage;
        }
        @if ($i == 1) {
            .grid__col-order-first {
                order: -$i;
            }
        }
        .grid__col-order-#{$i} {
            order: $i;
        }
        @if ($i == $grid__columns) {
            .grid__col-order-last {
                order: $i + 1;
            }
        }
	}
}

@mixin button-nav-button-generator($btn__color, $btn__shade_1, $btn__shade_2, $btn__shade_3, $btn__shade_4, $btn__shade_5)
{
    &.#{$btn__color} {
        background-color: $btn__shade_2;
        border: 0.0625rem solid $btn__shade_3;
        text-shadow: 0 0.0625rem 0 $btn__shade_5;
        box-shadow: inset 0 0.0625rem 0 0 $btn__shade_1;
        background: linear-gradient(to bottom, $btn__shade_2 5%, $btn__shade_4 100%);
        &:hover {
            background-color: $btn__shade_4;
            background: linear-gradient(to bottom, $btn__shade_4 5%, $btn__shade_2 100%);
        }
        &:active {
            top: 0.0625rem;
            position: relative;
        }
    }
}